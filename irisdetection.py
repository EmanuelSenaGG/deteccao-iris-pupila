# -*- coding: utf-8 -*-
"""irisdetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/153P4IuZXtALYKdf-w8kM11wJ3IGHHQcl
"""
import cv2
import numpy as np
import os
import glob
#importar a lib para usar no google colab
    #from google.colab import files
    #import shutil
from matplotlib import pyplot as plt

def encontrar_pupila(imagem):

  #tratamento da imagem preto e branco
  imagem_PeB = cv2.cvtColor(imagem, cv2.COLOR_BGR2GRAY)

  #colocar blur
  imagem_blur =  cv2.medianBlur(imagem_PeB, 15)

  #converter pra bgr
  image_bgr = cv2.cvtColor(imagem_blur, cv2.COLOR_RGB2BGR)

  #determinar o intervalo de tons de preto que queira mostrar
  maior_preto = np.array([0, 0, 0], dtype=np.uint8)
  menor_preto = np.array([110, 110, 110], dtype=np.uint8)

  #aplicar a mask baseado no intervalo de preto
  mask = cv2.inRange(image_bgr, maior_preto, menor_preto)
  resultado = cv2.bitwise_and(image_bgr, image_bgr, mask=mask)
  resultadoPeB = cv2.cvtColor(resultado, cv2.COLOR_BGR2GRAY)

  # virar a imagem de cabeça pra baixo para cortar a sombrancelha
  #imagem_virada = cv2.flip(resultadoPeB, 0)

  # Obter as dimensões da imagem
  #altura, largura = imagem_virada.shape[:2]

  # Definir a altura da região a ser mantida
  #altura_apagar = int(altura * 0.5)

  # Criar uma máscara para definir a região a ser apagada
  #mascara = np.zeros((altura, largura), dtype=np.uint8)
  #mascara[:altura_apagar, :] = 255

  # Aplicar a máscara na imagem original
  #imagem_apagada = cv2.bitwise_and(imagem_virada, imagem_virada, mask=mascara)

  # virar a imagem novamente já sem as sombrancelhas
  #nova_imagem = cv2.flip(imagem_apagada,0)

  #aplicar blur na nova imagem
  #nova_imagem = cv2.medianBlur(nova_imagem,13)

  #Processo para captura de circulos(iris)
  #circulos = cv2.HoughCircles(imagem_blur, cv2.HOUGH_GRADIENT,
  #1, 800, param1=100, param2=30, minRadius=100, maxRadius=200)

  #circulos_detectados = np.uint16(np.around(circulos))

  #processo para captura de pupilas
  pupilas = cv2.HoughCircles(resultadoPeB, cv2.HOUGH_GRADIENT,
  1, 300, param1=100, param2=20, minRadius=0, maxRadius=100)


  if pupilas is not None:
      pupilas_detectadas = np.uint16(np.around(pupilas))

    # Coordenadas do centro da imagem
      centro_x = imagem.shape[1] // 2
      centro_y = imagem.shape[0] // 2

    # Desenhar iris e pupilas próximas ao centro
      for (x, y, r) in pupilas_detectadas[0, :]:
        # Verificar se o centro do círculo está próximo ao centro da imagem
          if abs(x - centro_x) < centro_x / 3 and abs(y - centro_y) < centro_y / 3:
              cv2.circle(imagem, (x, y), r, (255, 255, 255), 4)



  #for (x,y,r) in circulos_detectados[0,:]:
    #cv2.circle(imagem, (x,y),r, (0,0,255), 4)

  return (imagem_PeB, imagem_blur, resultadoPeB, imagem)

#plotar as imagens
def display(img1, img2, img3, img4, img5):
  fig = plt.figure(figsize=(25, 10))

  ax1 = fig.add_subplot(1, 5, 1)
  plt.title('Input image', fontsize=16)
  ax1.axis('off')

  ax2 = fig.add_subplot(1, 5, 2)
  plt.title('Gray', fontsize=16)
  ax2.axis('off')

  ax3 = fig.add_subplot(1, 5, 3)
  plt.title('Blur', fontsize=16)
  ax3.axis('off')

  ax4 = fig.add_subplot(1, 5, 4)
  plt.title('Canny', fontsize=16)
  ax4.axis('off')

  ax5 = fig.add_subplot(1, 5, 5)
  plt.title('bordas', fontsize=16)
  ax4.axis('off')


  ax1.imshow(img1)
  ax2.imshow(img2)
  ax3.imshow(img3)
  ax4.imshow(img4)
  ax5.imshow(img5)


  return plt

def imread(img):
  img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
  return img

#upload_folder = 'upload'

#if os.path.isdir(upload_folder):
    #shutil.rmtree(upload_folder)
#os.mkdir(upload_folder)

# upload de imagens usando o colab{
    #uploaded = files.upload()
    #for filename in uploaded.keys():
    #dst_path = os.path.join(upload_folder, filename)
    #print(f'move {filename} to {dst_path}')
    #shutil.move(filename, dst_path)

    #input_folder = 'upload'
    # input_folder = '/content/drive/MyDrive/dataset iris'

    #input_list = sorted(glob.glob(os.path.join(input_folder, '*')))

# display each image in the upload folder
    #for input_path in zip(input_list):
    #file_path = input_path[0]
    #original = cv2.imread(file_path)

original=cv2.imread('WhatsApp Image 2023-06-16 at 3.32.53 PM.jpeg')
img1, img2, img3, img4 = encontrar_pupila(original.copy())

original = imread(original)
img1 = imread(img1)
img2 = imread(img2)
img3 = imread(img3)
img4 = imread(img4)


display(original,img1,img2,img3,img4)

